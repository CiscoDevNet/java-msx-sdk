/*
 * MSX SDK
 * MSX SDK client.
 *
 * The version of the OpenAPI document: 1.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cisco.msx.platform.client;

import com.cisco.msx.platform.ApiException;
import com.cisco.msx.platform.model.Error;
import com.cisco.msx.platform.model.Incident;
import com.cisco.msx.platform.model.IncidentCancel;
import com.cisco.msx.platform.model.IncidentCreate;
import com.cisco.msx.platform.model.IncidentUpdate;
import com.cisco.msx.platform.model.IncidentsPage;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IncidentsApi
 */
@Ignore
public class IncidentsApiTest {

    private final IncidentsApi api = new IncidentsApi();

    
    /**
     * Cancels an incident.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelIncidentTest() throws ApiException {
        String id = null;
        IncidentCancel incidentCancel = null;
        Incident response = api.cancelIncident(id, incidentCancel);

        // TODO: test validations
    }
    
    /**
     * Create a new Incident.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createIncidentTest() throws ApiException {
        IncidentCreate incidentCreate = null;
        Incident response = api.createIncident(incidentCreate);

        // TODO: test validations
    }
    
    /**
     * Deletes an incident.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteIncidentTest() throws ApiException {
        String id = null;
        api.deleteIncident(id);

        // TODO: test validations
    }
    
    /**
     * Get incident details.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIncidentTest() throws ApiException {
        String id = null;
        Incident response = api.getIncident(id);

        // TODO: test validations
    }
    
    /**
     * Get Incidents by filter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIncidentsTest() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        String id = null;
        String externalId = null;
        String tenantId = null;
        String category = null;
        String subcategory = null;
        String state = null;
        String priority = null;
        String severity = null;
        String sortBy = null;
        String sortOrder = null;
        IncidentsPage response = api.getIncidents(page, pageSize, id, externalId, tenantId, category, subcategory, state, priority, severity, sortBy, sortOrder);

        // TODO: test validations
    }
    
    /**
     * Updates an incident.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateIncidentTest() throws ApiException {
        String id = null;
        IncidentUpdate incidentUpdate = null;
        Incident response = api.updateIncident(id, incidentUpdate);

        // TODO: test validations
    }
    
}
