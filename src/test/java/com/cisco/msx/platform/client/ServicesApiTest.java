/*
 * MSX SDK
 * MSX SDK client.
 *
 * The version of the OpenAPI document: 1.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cisco.msx.platform.client;

import com.cisco.msx.platform.ApiException;
import com.cisco.msx.platform.model.Error;
import com.cisco.msx.platform.model.LegacyServiceOrder;
import com.cisco.msx.platform.model.LegacyServiceOrderResponse;
import com.cisco.msx.platform.model.Service;
import com.cisco.msx.platform.model.ServiceUpdate;
import com.cisco.msx.platform.model.ServicesPage;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ServicesApi
 */
@Ignore
public class ServicesApiTest {

    private final ServicesApi api = new ServicesApi();

    
    /**
     * Deletes a service.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteServiceTest() throws ApiException {
        String id = null;
        api.deleteService(id);

        // TODO: test validations
    }
    
    /**
     * Returns a service.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceTest() throws ApiException {
        String id = null;
        Service response = api.getService(id);

        // TODO: test validations
    }
    
    /**
     * Returns a page of services.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServicesPageTest() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        List<UUID> tenantIds = null;
        ServicesPage response = api.getServicesPage(page, pageSize, tenantIds);

        // TODO: test validations
    }
    
    /**
     * Submits an order.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void submitOrderTest() throws ApiException {
        UUID productId = null;
        UUID offerId = null;
        LegacyServiceOrder legacyServiceOrder = null;
        LegacyServiceOrderResponse response = api.submitOrder(productId, offerId, legacyServiceOrder);

        // TODO: test validations
    }
    
    /**
     * Updates an order.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateOrderTest() throws ApiException {
        UUID productId = null;
        UUID offerId = null;
        LegacyServiceOrder legacyServiceOrder = null;
        LegacyServiceOrderResponse response = api.updateOrder(productId, offerId, legacyServiceOrder);

        // TODO: test validations
    }
    
    /**
     * Updates a service.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateServiceTest() throws ApiException {
        String id = null;
        ServiceUpdate serviceUpdate = null;
        Service response = api.updateService(id, serviceUpdate);

        // TODO: test validations
    }
    
}
