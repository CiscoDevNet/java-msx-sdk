/*
 * MSX SDK
 * MSX SDK client.
 *
 * The version of the OpenAPI document: 1.0.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cisco.msx.platform.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * DeviceTemplateAccess
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-17T18:31:30.346538700-04:00[America/Toronto]")
public class DeviceTemplateAccess {
  public static final String SERIALIZED_NAME_TENANT_IDS = "tenantIds";
  @SerializedName(SERIALIZED_NAME_TENANT_IDS)
  private List<UUID> tenantIds = null;

  public static final String SERIALIZED_NAME_GLOBAL = "global";
  @SerializedName(SERIALIZED_NAME_GLOBAL)
  private Boolean global;

  public DeviceTemplateAccess() { 
  }

  public DeviceTemplateAccess tenantIds(List<UUID> tenantIds) {
    
    this.tenantIds = tenantIds;
    return this;
  }

  public DeviceTemplateAccess addTenantIdsItem(UUID tenantIdsItem) {
    if (this.tenantIds == null) {
      this.tenantIds = new ArrayList<>();
    }
    this.tenantIds.add(tenantIdsItem);
    return this;
  }

   /**
   * List of tenants to grant access. Mutually exclusive from global flag field.
   * @return tenantIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of tenants to grant access. Mutually exclusive from global flag field.")

  public List<UUID> getTenantIds() {
    return tenantIds;
  }


  public void setTenantIds(List<UUID> tenantIds) {
    this.tenantIds = tenantIds;
  }


  public DeviceTemplateAccess global(Boolean global) {
    
    this.global = global;
    return this;
  }

   /**
   * Determines if the template is globally accessible. Mutually exclusive from tenant list field.
   * @return global
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determines if the template is globally accessible. Mutually exclusive from tenant list field.")

  public Boolean getGlobal() {
    return global;
  }


  public void setGlobal(Boolean global) {
    this.global = global;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceTemplateAccess deviceTemplateAccess = (DeviceTemplateAccess) o;
    return Objects.equals(this.tenantIds, deviceTemplateAccess.tenantIds) &&
        Objects.equals(this.global, deviceTemplateAccess.global);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(tenantIds, global);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceTemplateAccess {\n");
    sb.append("    tenantIds: ").append(toIndentedString(tenantIds)).append("\n");
    sb.append("    global: ").append(toIndentedString(global)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

