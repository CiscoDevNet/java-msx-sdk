/*
 * MSX SDK
 * MSX SDK client.
 *
 * The version of the OpenAPI document: 1.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cisco.msx.platform.client;

import com.cisco.msx.platform.ApiCallback;
import com.cisco.msx.platform.ApiClient;
import com.cisco.msx.platform.ApiException;
import com.cisco.msx.platform.ApiResponse;
import com.cisco.msx.platform.Configuration;
import com.cisco.msx.platform.Pair;
import com.cisco.msx.platform.ProgressRequestBody;
import com.cisco.msx.platform.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.cisco.msx.platform.model.Error;
import com.cisco.msx.platform.model.LicenseSummary;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LicensingLicensesApi {
    private ApiClient localVarApiClient;

    public LicensingLicensesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LicensingLicensesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getLicensesList
     * @param smartAccountId Smart Account Identifier (required)
     * @param virtualAccountId Virtual Account Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLicensesListCall(String smartAccountId, String virtualAccountId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/licensing/api/v8/licensing/api/v8/licenses/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (smartAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("smartAccountId", smartAccountId));
        }

        if (virtualAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtualAccountId", virtualAccountId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLicensesListValidateBeforeCall(String smartAccountId, String virtualAccountId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'smartAccountId' is set
        if (smartAccountId == null) {
            throw new ApiException("Missing the required parameter 'smartAccountId' when calling getLicensesList(Async)");
        }
        
        // verify the required parameter 'virtualAccountId' is set
        if (virtualAccountId == null) {
            throw new ApiException("Missing the required parameter 'virtualAccountId' when calling getLicensesList(Async)");
        }
        

        okhttp3.Call localVarCall = getLicensesListCall(smartAccountId, virtualAccountId, _callback);
        return localVarCall;

    }

    /**
     * Returns a filtered list of licenses.
     * 
     * @param smartAccountId Smart Account Identifier (required)
     * @param virtualAccountId Virtual Account Identifier (required)
     * @return List&lt;LicenseSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<LicenseSummary> getLicensesList(String smartAccountId, String virtualAccountId) throws ApiException {
        ApiResponse<List<LicenseSummary>> localVarResp = getLicensesListWithHttpInfo(smartAccountId, virtualAccountId);
        return localVarResp.getData();
    }

    /**
     * Returns a filtered list of licenses.
     * 
     * @param smartAccountId Smart Account Identifier (required)
     * @param virtualAccountId Virtual Account Identifier (required)
     * @return ApiResponse&lt;List&lt;LicenseSummary&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LicenseSummary>> getLicensesListWithHttpInfo(String smartAccountId, String virtualAccountId) throws ApiException {
        okhttp3.Call localVarCall = getLicensesListValidateBeforeCall(smartAccountId, virtualAccountId, null);
        Type localVarReturnType = new TypeToken<List<LicenseSummary>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a filtered list of licenses. (asynchronously)
     * 
     * @param smartAccountId Smart Account Identifier (required)
     * @param virtualAccountId Virtual Account Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLicensesListAsync(String smartAccountId, String virtualAccountId, final ApiCallback<List<LicenseSummary>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLicensesListValidateBeforeCall(smartAccountId, virtualAccountId, _callback);
        Type localVarReturnType = new TypeToken<List<LicenseSummary>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
