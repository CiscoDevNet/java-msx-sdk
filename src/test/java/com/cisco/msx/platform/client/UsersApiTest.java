/*
 * MSX SDK
 * MSX SDK client.
 *
 * The version of the OpenAPI document: 1.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cisco.msx.platform.client;

import com.cisco.msx.platform.ApiException;
import com.cisco.msx.platform.model.Error;
import java.util.UUID;
import com.cisco.msx.platform.model.UpdatePassword;
import com.cisco.msx.platform.model.User;
import com.cisco.msx.platform.model.UserCreate;
import com.cisco.msx.platform.model.UserUpdate;
import com.cisco.msx.platform.model.UsersPage;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Ignore
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    
    /**
     * Creates a new user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        UserCreate userCreate = null;
        User response = api.createUser(userCreate);

        // TODO: test validations
    }
    
    /**
     * Deletes a user by id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        UUID id = null;
        api.deleteUser(id);

        // TODO: test validations
    }
    
    /**
     * Returns the current user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCurrentUserTest() throws ApiException {
        User response = api.getCurrentUser();

        // TODO: test validations
    }
    
    /**
     * Returns an existing user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        UUID id = null;
        User response = api.getUser(id);

        // TODO: test validations
    }
    
    /**
     * Returns a page of users.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersPageTest() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        UUID tenantId = null;
        Boolean deleted = null;
        UsersPage response = api.getUsersPage(page, pageSize, tenantId, deleted);

        // TODO: test validations
    }
    
    /**
     * Updates an existing user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        UUID id = null;
        UserUpdate userUpdate = null;
        User response = api.updateUser(id, userUpdate);

        // TODO: test validations
    }
    
    /**
     * Update a user password.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserPasswordTest() throws ApiException {
        UpdatePassword updatePassword = null;
        api.updateUserPassword(updatePassword);

        // TODO: test validations
    }
    
}
